

----STARTUP---- (31 October 2019 15:42:34) as /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/CuisUniversity-3938.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDGuruFirstBootstrappin'!

!classDefinition: #NameOfSubclass category: #TDDGuruFirstBootstrappin stamp: 'SN 10/31/2019 15:47:10'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDGuruFirstBootstrappin'!

!classRemoval: #NameOfSubclass stamp: 'SN 10/31/2019 15:47:28'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDGuruFirstBootstrappin'!

Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

!classDefinition: #Cart category: #'TusLibros-Exercise' stamp: 'SN 10/31/2019 15:49:10'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

----SNAPSHOT----(31 October 2019 15:51:46) CuisUniversity-3938.image priorSource: 14319118!

Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

!classDefinition: #CartTest category: #'TusLibros-Exercise' stamp: 'SN 10/31/2019 15:53:04'!
Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

!classDefinition: #CartTest category: #'TusLibros-Exercise' stamp: 'SN 10/31/2019 15:53:20'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 15:55:36'!
test01NewCartShouldBeEmpty

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.! !
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 15:55:52' prior: 50777416!
test01NewCartShouldBeEmpty

	| cart |

	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 15:55:54'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 15:56:30'!
isEmpty

	^ true! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 15:56:31'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 15:58:36' prior: 50777422!
test01NewCartShouldBeEmpty

	| cart |

	cart := Cart new.
	
	self assert: cart isEmpty.
	self assert: 0 equals: cart count.! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 15:58:37'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 15:58:52'!
count

	^ 0! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 15:58:54'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 15:59:39'!
test02CartWithOneBookShouldNotBeEmpty

	| cart |

	cart := Cart new.
	
	self assert: cart isEmpty.
	self assert: 0 equals: cart count.! !

!classDefinition: #CartTest category: #'TusLibros-Exercise' stamp: 'SN 10/31/2019 16:01:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:01:09' prior: 50777451!
test02CartWithOneBookShouldNotBeEmpty

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self assert: cart isEmpty.
	self assert: 0 equals: cart count.! !
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:01:26' prior: 50777466!
test02CartWithOneBookShouldNotBeEmpty

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self deny: cart isEmpty.
	self assert: 1 equals: cart count.! !
!CartTest methodsFor: 'set up' stamp: 'SN 10/31/2019 16:02:05'!
setUp

	book := #aBook! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:02:08'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:02:08'!
ERROR!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:02:08'!
ERROR!

!classDefinition: #Cart category: #'TusLibros-Exercise' stamp: 'SN 10/31/2019 16:03:07'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!
!Cart methodsFor: 'book adding' stamp: 'SN 10/31/2019 16:03:05'!
add: aBook
	
	books add: aBook .! !
!Cart methodsFor: 'initialization' stamp: 'SN 10/31/2019 16:03:37'!
initialize

	books := OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:03:54' prior: 50777445!
count

	^ books count .! !
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:04:02' prior: 50777430!
isEmpty

	^ books isEmpty .! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:04:03'!
ERROR!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:04:03'!
ERROR!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:04:12'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:04:26' prior: 50777508!
count

	^ books size .! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:04:27'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:04:27'!
PASSED!

!classDefinition: #CartTest category: #'TusLibros-Exercise' stamp: 'SN 10/31/2019 16:06:00'!
TestCase subclass: #CartTest
	instanceVariableNames: 'book otherBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:05:58'!
test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo

	| cart |

	cart := Cart new.
	
	cart add: book.
	cart add: otherBook.
	
	self deny: cart isEmpty.
	self assert: 2 equals: cart count.! !

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:06:11'!
PASSED!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:06:11'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:06:11'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:06:11'!
PASSED!
!CartTest methodsFor: 'set up' stamp: 'SN 10/31/2019 16:06:51' prior: 50777481!
setUp

	book := #aBook.
	otherBook := #otherBook.! !
!CartTest methodsFor: 'set up' stamp: 'SN 10/31/2019 16:07:11' prior: 50777564!
setUp

	book := #aBook.
	otherBook := #otherBook.
	self deny: true.! !
!CartTest methodsFor: 'set up' stamp: 'SN 10/31/2019 16:07:18' prior: 50777569!
setUp

	book := #aBook.
	otherBook := #otherBook.! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:07:18'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:07:18'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:07:18'!
PASSED!

----SNAPSHOT----(31 October 2019 16:07:27) CuisUniversity-3938.image priorSource: 14263693!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:09:34'!
test04CartWithBookShouldHaveTheBook

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self assert: (cart has: book).! !

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:09:39'!
ERROR!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:10:29'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:10:55'!
has: aSymbol 
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:11:35' prior: 50777603!
has: aBook 
	
	^ books includes: aBook .! !

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:11:43'!
PASSED!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:11:43'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:11:43'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:11:43'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:11:43'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:12:20'!
test04CartWithBookShouldNotHaveOtherBook

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self deny: (cart has: otherBook).! !

!testRun: #CartTest #test04CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:12:21'!
PASSED!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:12:21'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:12:21'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:12:21'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:12:21'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:12:21'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:12:32'!
test05CartWithBookShouldNotHaveOtherBook

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self deny: (cart has: otherBook).! !

!methodRemoval: CartTest #test04CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:12:32'!
test04CartWithBookShouldNotHaveOtherBook

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self deny: (cart has: otherBook).!

----End fileIn of /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'initialization' stamp: 'SN 10/31/2019 16:22:01' prior: 50777504!
initialize

	books := Dictionary new.! !
!Cart methodsFor: 'initialization' stamp: 'SN 10/31/2019 16:23:31' prior: 50780679!
initialize

	books := Bag new.! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:23:32'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:23:32'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:23:32'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:23:32'!
PASSED!

!testRun: #CartTest #test05CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:23:32'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:24:49'!
test06CartWithBookShouldHaveBookOnce

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self deny: (cart has: otherBook).! !
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:25:44' prior: 50780702!
test06CartWithBookShouldHaveBookOnce

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self assert: 1 equals: (cart quantityOf: book).! !

!testRun: #CartTest #test06CartWithBookShouldHaveBookOnce stamp: 'SN 10/31/2019 16:25:48'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:26:19'!
quanitityOf: aBook

	^ books occurrencesOf: aBook .! !

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:26:20'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:26:20'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:26:20'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:26:20'!
PASSED!

!testRun: #CartTest #test05CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:26:20'!
PASSED!

!testRun: #CartTest #test06CartWithBookShouldHaveBookOnce stamp: 'SN 10/31/2019 16:26:20'!
ERROR!

!testRun: #CartTest #test06CartWithBookShouldHaveBookOnce stamp: 'SN 10/31/2019 16:26:20'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 10/31/2019 16:26:34'!
quantityOf: aBook

	^ books occurrencesOf: aBook .! !

!methodRemoval: Cart #quanitityOf: stamp: 'SN 10/31/2019 16:26:34'!
quanitityOf: aBook

	^ books occurrencesOf: aBook .!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:26:35'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:26:35'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:26:35'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:26:35'!
PASSED!

!testRun: #CartTest #test05CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:26:35'!
PASSED!

!testRun: #CartTest #test06CartWithBookShouldHaveBookOnce stamp: 'SN 10/31/2019 16:26:35'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:26:53'!
test07CartWithRepeatedBookShouldHaveBookTwice

	| cart |

	cart := Cart new.
	
	cart add: book.
	
	self assert: 1 equals: (cart quantityOf: book).! !
!CartTest methodsFor: 'tests' stamp: 'SN 10/31/2019 16:27:19' prior: 50780772!
test07CartWithRepeatedBookShouldHaveBookTwice

	| cart |

	cart := Cart new.
	
	2 timesRepeat: [cart add: book].
	
	self assert: 2 equals: (cart quantityOf: book).! !

!testRun: #CartTest #test07CartWithRepeatedBookShouldHaveBookTwice stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test01NewCartShouldBeEmpty stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test02CartWithOneBookShouldNotBeEmpty stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test03CartWithTwoBooksShouldNotBeEmptyAndHaveCountTwo stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test04CartWithBookShouldHaveTheBook stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test05CartWithBookShouldNotHaveOtherBook stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test06CartWithBookShouldHaveBookOnce stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

!testRun: #CartTest #test07CartWithRepeatedBookShouldHaveBookTwice stamp: 'SN 10/31/2019 16:27:21'!
PASSED!

----SNAPSHOT----(31 October 2019 16:27:32) CuisUniversity-3938.image priorSource: 14269992!

----QUIT----(31 October 2019 16:31:05) CuisUniversity-3938.image priorSource: 14373219!

----STARTUP---- (31 October 2019 20:56:14) as /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/CuisUniversity-3938.image!


!classRemoval: #Cart stamp: 'SN 10/31/2019 21:02:29'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

!classRemoval: #CartTest stamp: 'SN 10/31/2019 21:02:30'!
TestCase subclass: #CartTest
	instanceVariableNames: 'book otherBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

----End fileIn of /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/TusLibros-2.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 10/31/2019 21:02:47'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:04:15'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:06:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:06:58'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:06:48'!
test01CashierWithEmptyCartRaisesError

	cashier := Cashier ! !

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:07:32'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:07:46' prior: 50781072!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:12:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:12:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:12:38' prior: 50781088!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:15:16' prior: 50781108!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog.
	
	self should: [cashier checkout] raise: Error - MessageNotUnderstood
		withMessageText: ''! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:17:04' prior: 50781115!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog.
	
	self should: [cashier checkout] raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:17:07'!
ERROR!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:20:18'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart catalog aCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:20:17' prior: 50781125!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout] raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:20:21'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'SN 10/31/2019 21:25:51'!
for: anUndefinedObject withPriceList: anUndefinedObject2 withCreditCard: anUndefinedObject3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anUndefinedObject withPriceList: anUndefinedObject2 withCreditCard: anUndefinedObject3 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 10/31/2019 21:34:04' prior: 50781162!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard 

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard ! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:34:07'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:35:31'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:35:31'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:35:31'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SN 10/31/2019 21:35:31'!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard 
	self shouldBeImplemented.
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'SN 10/31/2019 21:35:49' prior: 50781206!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard 
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:35:56'!
ERROR!
!Cashier methodsFor: 'cobranding' stamp: 'SN 10/31/2019 21:36:24'!
checkout
	self shouldBeImplemented.! !
!Cashier methodsFor: 'cobranding' stamp: 'SN 10/31/2019 21:37:31' prior: 50781225!
checkout
	
	self error: 'No se puede hacer checkout de un carrito vacio'.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:37:34'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:37:34'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:37:41'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:37:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:37:54' prior: 50781147!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:37:55'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:37:55'!
PASSED!

----STARTUP---- (31 October 2019 21:41:31) as /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/CuisUniversity-3938.image!


!classRemoval: #Cart stamp: 'SN 10/31/2019 21:41:35'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

!classRemoval: #CartTest stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CartTest
	instanceVariableNames: 'book otherBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Exercise'!

!classDefinition: #Cart category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:45'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 17:51'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !

!classDefinition: #CartTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:08'!
test01NewCartsAreCreatedEmpty

	self assert: self createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:45'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 17:43'!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:44'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:48'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43'!
itemSellByTheStore
	
	^ 'validBook'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:06:48'!
test01CashierWithEmptyCartRaisesError

	cashier := Cashier ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:07:46' prior: 50781495!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier ! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:12:38' prior: 50781513!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:15:16' prior: 50781533!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog.
	
	self should: [cashier checkout] raise: Error - MessageNotUnderstood
		withMessageText: ''! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:17:04' prior: 50781540!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog.
	
	self should: [cashier checkout] raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 10/31/2019 21:41:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart catalog aCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:20:17' prior: 50781550!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout] raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 10/31/2019 21:25:51'!
for: anUndefinedObject withPriceList: anUndefinedObject2 withCreditCard: anUndefinedObject3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anUndefinedObject withPriceList: anUndefinedObject2 withCreditCard: anUndefinedObject3 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 10/31/2019 21:34:04' prior: 50781580!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard 

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard ! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:41:37'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:41:37'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 10/31/2019 21:41:37'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SN 10/31/2019 21:35:31'!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard 
	self shouldBeImplemented.
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'SN 10/31/2019 21:35:49' prior: 50781621!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard 
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.! !
!Cashier methodsFor: 'cobranding' stamp: 'SN 10/31/2019 21:36:24'!
checkout
	self shouldBeImplemented.! !
!Cashier methodsFor: 'cobranding' stamp: 'SN 10/31/2019 21:37:31' prior: 50781637!
checkout
	
	self error: 'No se puede hacer checkout de un carrito vacio'.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:37:54' prior: 50781568!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 10/31/2019 21:42:19'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:42:25'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:42:25'!
PASSED!

----SNAPSHOT----(31 October 2019 21:42:32) CuisUniversity-3938.image priorSource: 14373312!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:48:34' prior: 50781646!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier priceCharged equals: 0! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:48:38'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:49:54' prior: 50781693!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:51:55' prior: 50781709!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty..! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:52:01' prior: 50781723!
test01CashierWithEmptyCartRaisesError

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:52:35'!
ERROR!
!Cashier methodsFor: 'testing' stamp: 'SN 10/31/2019 21:52:52'!
priceCharged
	self shouldBeImplemented.! !
!Cashier methodsFor: 'testing' stamp: 'SN 10/31/2019 21:53:00' prior: 50781755!
priceCharged
	
	^ 0! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:53:06'!
ERROR!
!Cashier methodsFor: 'testing' stamp: 'SN 10/31/2019 21:53:38'!
soldItems
	self shouldBeImplemented.! !
!Cashier methodsFor: 'testing' stamp: 'SN 10/31/2019 21:53:50' prior: 50781765!
soldItems
	
	^ OrderedCollection new.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:53:55'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 10/31/2019 21:53:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:55:58'!
test02CashierWithoneItemCartChargesItemPrice

	|cashier|
	
	cashier := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 21:57:22' prior: 50781779!
test02CashierWithoneItemCartChargesItemPrice

	|cashier cart |
	
	cart := Cart acceptingItemsOf: catalog.	
	cashier := Cashier for: cart withPriceList: catalog withCreditCard: aCard.
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 10/31/2019 22:00:26' prior: 50781790!
test02CashierWithoneItemCartChargesItemPrice

	|cashier cart |
	
	cart := Cart acceptingItemsOf: catalog.
	
	cashier := Cashier for: cart withPriceList: catalog withCreditCard: aCard.
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 10/31/2019 22:00:29'!
ERROR!

----SNAPSHOT----(31 October 2019 22:00:45) CuisUniversity-3938.image priorSource: 14401239!

----STARTUP---- (4 November 2019 18:55:59) as /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/CuisUniversity-3938.image!

!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 18:56:58' prior: 50781738!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard.
	
	self should: [cashier_build checkout]
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier_build priceCharged equals: 0.
	self assert: cashier_build soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 18:57:22' prior: 50781825!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := [Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard].
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier_build priceCharged equals: 0.
	self assert: cashier_build soldItems isEmpty.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 18:57:26'!
FAILURE!
!Cashier methodsFor: 'initialization' stamp: 'SN 11/4/2019 18:58:07' prior: 50781630!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard 
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 18:58:23' prior: 50781593!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard 

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard ! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 18:58:25'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 18:58:25'!
ERROR!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 18:59:59'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart catalog aCard emptySalesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 18:59:58' prior: 50781840!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := [Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard withSalesBook: emptySalesBook].
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
		
	self assert: cashier_build priceCharged equals: 0.
	self assert: cashier_build soldItems isEmpty.! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 19:00:50'!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: salesBook

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard ! !

!methodRemoval: Cashier class #for:withPriceList:withCreditCard: stamp: 'SN 11/4/2019 19:00:57'!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard 

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 19:01:06' prior: 50781907!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: salesBook

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: salesBook ! !
!Cashier methodsFor: 'initialization' stamp: 'SN 11/4/2019 19:01:25'!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 11/4/2019 19:01:41'!
Object subclass: #Cashier
	instanceVariableNames: 'cart catalog creditCard salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SN 11/4/2019 19:01:37' prior: 50781939!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.
	salesBook := aSalesBook .! !

!methodRemoval: Cashier #initializeFor:withPriceList:withCreditCard: stamp: 'SN 11/4/2019 19:01:45'!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard 
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.!
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 19:01:56' prior: 50781928!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook ! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 19:02:01'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 19:02:01'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:03:29' prior: 50781891!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := [Cashier for: emptyCart withPriceList: catalog withCreditCard: aCard withSalesBook: emptySalesBook].
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
	
	self assert: emptySalesBook isEmpty.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 19:03:30'!
ERROR!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:08:34'!
setUp

	catalog := 'a'! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:08:55' prior: 50782007!
setUp

	catalog := Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:09:09' prior: 50782011!
setUp

	catalog := Array with: self itemSellByTheStore.
	emptySalesBook := OrderedCollection new.! !
!Cashier methodsFor: 'initialization' stamp: 'SN 11/4/2019 19:09:57'!
initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	salesBook := aSalesBook .! !

Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 11/4/2019 19:10:05'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 19:10:22'!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook ! !

!methodRemoval: Cashier class #for:withPriceList:withCreditCard:withSalesBook: stamp: 'SN 11/4/2019 19:10:34'!
for: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook !

!methodRemoval: Cashier #initializeFor:withPriceList:withCreditCard:withSalesBook: stamp: 'SN 11/4/2019 19:10:38'!
initializeFor: aCart withPriceList: aCatalog withCreditCard: aCreditCard withSalesBook: aSalesBook
	
	cart := aCart.
	catalog := aCatalog.
	creditCard := aCreditCard.
	salesBook := aSalesBook .!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:10:56' prior: 50782016!
setUp

	emptySalesBook := OrderedCollection new.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 19:11:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:11:24' prior: 50781990!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := [Cashier for: emptyCart withCreditCard: aCard withSalesBook: emptySalesBook].
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
	
	self assert: emptySalesBook isEmpty.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 19:11:25'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 19:11:25'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 19:11:25'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 19:11:25'!
ERROR!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 19:12:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:12:02' prior: 50782073!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Array with: self itemSellByTheStore.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:12:42' prior: 50782125!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Array with: 'validBook'.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 19:12:44'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 19:12:44'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 19:12:44'!
ERROR!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:14:02' prior: 50782131!
setUp

	emptyCart := 'a'.
	emptySalesBook := OrderedCollection new.
	catalog := Array with: 'validBook'.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:14:49' prior: 50782147!
setUp

	emptyCart := Cart acceptingItemsOf: catalog..
	emptySalesBook := OrderedCollection new.
	catalog := Array with: 'validBook'.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:14:56' prior: 50782154!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Array with: 'validBook'.
	emptyCart := Cart acceptingItemsOf: catalog.! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 19:15:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:15:42' prior: 50782162!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Array with: 'validBook'.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:16:29' prior: 50782178!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Array with: 'validBook'.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog; add: 'validBook'.! !
!CartTest methodsFor: 'support' stamp: 'SN 11/4/2019 19:22:05' prior: 50781459!
defaultCatalog
	
	^ Dictionary new; add: (self itemSellByTheStore)->0; yourself! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 11/4/2019 19:22:09'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:22:19'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'SN 11/4/2019 19:23:07' prior: 50782196!
defaultCatalog
	
	^ Dictionary new add: (self itemSellByTheStore)->0; yourself! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:23:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 11/4/2019 19:23:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:23:08'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 11/4/2019 19:23:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 11/4/2019 19:23:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 11/4/2019 19:23:08'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 11/4/2019 19:23:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 11/4/2019 19:23:08'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:23:12'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:23:28' prior: 50781328!
includes: anItem

	^items includesKey: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:23:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 11/4/2019 19:23:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:23:29'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 11/4/2019 19:23:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 11/4/2019 19:23:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 11/4/2019 19:23:29'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 11/4/2019 19:23:29'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 11/4/2019 19:23:29'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:23:54' prior: 50782264!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'assertions' stamp: 'SN 11/4/2019 19:24:08' prior: 50781305!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 11/4/2019 19:24:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 11/4/2019 19:24:09'!
PASSED!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:24:34' prior: 50782187!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: (self itemSellByTheStore)->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog; add: 'validBook'.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:24:45' prior: 50782330!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog; add: 'validBook'.! !
!CartTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:26:12'!
test09EmptyCartHasTotalPriceZero

	| cart |
	
	cart := self createCart.
	
	self assert:cart totalPrice equals: 0.! !

!testRun: #CartTest #test09EmptyCartHasTotalPriceZero stamp: 'SN 11/4/2019 19:26:15'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:26:31'!
totalPrice
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:26:37' prior: 50782359!
totalPrice
	
	^0.! !

!testRun: #CartTest #test09EmptyCartHasTotalPriceZero stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 11/4/2019 19:26:43'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasTotalPriceZero stamp: 'SN 11/4/2019 19:26:43'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:27:32'!
test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog

	| cart |
	
	cart := self createCart.
	
	self assert:cart totalPrice equals: 0.! !
!CartTest methodsFor: 'support' stamp: 'SN 11/4/2019 19:28:14' prior: 50782230!
defaultCatalog
	
	^ Dictionary new add: (self itemSellByTheStore)->(self priceOfItemSoldByStore); yourself! !
!CartTest methodsFor: 'support' stamp: 'SN 11/4/2019 19:28:25'!
priceOfItemSoldByStore	
	
	^ 5.! !
!CartTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:30:09' prior: 50782397!
test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog

	| cart |
	
	cart := self createCart.
	
	cart add: 3 of: self itemSellByTheStore .
	
	self assert:cart totalPrice equals: 3 * self priceOfItemSoldByStore .! !

!testRun: #CartTest #test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog stamp: 'SN 11/4/2019 19:30:10'!
FAILURE!

!testRun: #CartTest #test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog stamp: 'SN 11/4/2019 19:30:29'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:30:37' prior: 50782415!
test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog

	| cart |
	
	cart := self createCart.
	
	cart add: 3 of: self itemSellByTheStore .
	
	self assert: cart totalPrice equals: 3 * self priceOfItemSoldByStore .! !
!CartTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:30:43' prior: 50782433!
test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog

	| cart |
	
	cart := self createCart.
	
	cart add: 3 of: self itemSellByTheStore .
	
	self assert: cart totalPrice equals: 3 * self priceOfItemSoldByStore .! !

!testRun: #CartTest #test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog stamp: 'SN 11/4/2019 19:31:04'!
FAILURE!

	#() sum.!
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:32:45' prior: 50782363!
totalPrice
	
	! !

#() sum!
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:35:19' prior: 50782457!
totalPrice
	
	^ items sum: 0 ifEmpty: 0.! !

OrderedCollection new sum: 0 ifEmpty: 0.!

OrderedCollection new sum: 0 ifEmpty: 1.!

OrderedCollection new sum: 0 ifEmpty: 2.!

OrderedCollection new sum: [0] ifEmpty: 2.!

OrderedCollection with: 2; sum: [0] ifEmpty: 2.!

(OrderedCollection with: 2) sum: [0] ifEmpty: 2.!

(OrderedCollection with: 2) sum: [ :e | 0] ifEmpty: 2.!

(OrderedCollection with: 2) sum: [ :e | e] ifEmpty: 0.!
!Cart methodsFor: 'testing' stamp: 'SN 11/4/2019 19:37:40' prior: 50782461!
totalPrice
	
	^ items sum: [:item | catalog at: item ] ifEmpty: 0.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test09EmptyCartHasTotalPriceZero stamp: 'SN 11/4/2019 19:37:43'!
PASSED!

!testRun: #CartTest #test10CartWithItemsHasTotalPriceSumOfItemsPriceAccordingToCatalog stamp: 'SN 11/4/2019 19:37:43'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:39:32' prior: 50781802!
test02CashierWithoneItemCartChargesItemPrice

	|cashier |
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:40:14'!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier |
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !

!methodRemoval: CashierTest #test02CashierWithoneItemCartChargesItemPrice stamp: 'SN 11/4/2019 19:40:14'!
test02CashierWithoneItemCartChargesItemPrice

	|cashier |
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 19:47:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart expiredCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SN 11/4/2019 19:47:50'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 19:47:55'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart expiredCard expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:47:38' prior: 50782526!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withExpiration: expirationDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 19:48:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:48:32' prior: 50782573!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier expiredCard|
	
	expiredCard := CreditCard withNumber: '0000000000000000' withExpiration: expirationDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 19:49:03' prior: 50782341!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog; add: 'validBook'.
	expirationDate := GregorianMonthOfYear year: 1962 month: 12.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:50:24' prior: 50782602!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier expiredCard|
	
	expiredCard := CreditCard withNumber: '0000000000000000' withExpiration: expirationDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:50:59' prior: 50782629!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier expiredCard|
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: aCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:51:17' prior: 50782644!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier_build := Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook .
	
	cashier checkout.
		
	self assert: cashier priceCharged equals: 0.
	self assert: cashier soldItems isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:51:51' prior: 50782660!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	|cashier expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier_build := Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook .
	
	cashier checkout.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:52:02' prior: 50782677!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier_build := Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook .
	
	
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:52:40' prior: 50782692!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier_build := Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook .
	
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:53:34' prior: 50782706!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier_build := Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook .
	
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'Tarjeta expirada'.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 19:56:38' prior: 50782724!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: expirationDate.
	
	cashier_build := [Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook ].
	
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'Tarjeta expirada'.
	
	self assert: emptySalesBook isEmpty.! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 20:02:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart expirationDate someDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 20:02:42' prior: 50782617!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog; add: 'validBook'.
	expirationDate := GregorianMonthOfYear year: 1962 month: November.
	someDate := FixedGregorianDate year: 2020 month: March dayNumber: 20! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 20:02:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart someOldDate someDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SN 11/4/2019 20:02:58' prior: 50782769!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := Cart acceptingItemsOf: catalog; add: 'validBook'.
	someOldDate := GregorianMonthOfYear year: 1962 month: November.
	someDate := FixedGregorianDate year: 2020 month: March dayNumber: 20! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SN 11/4/2019 20:02:58' prior: 50782742!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someOldDate.
	
	cashier_build := [Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook ].
	
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'Tarjeta expirada'.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:03:29' prior: 50782808!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someOldDate.
	
	cashier_build := [Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook withDate: someDate ].
	
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'Tarjeta expirada'.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:03:44' prior: 50782090!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := [Cashier for: emptyCart withCreditCard: aCard withSalesBook: emptySalesBook withDate: someDate ].
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
	
	self assert: emptySalesBook isEmpty.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 11/4/2019 20:04:19'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesBook date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SN 11/4/2019 20:04:16'!
initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate
	
	cart := aCart.
	creditCard := aCreditCard.
	salesBook := aSalesBook .
	date := aDate .! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 20:04:38'!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate .! !

!methodRemoval: Cashier class #for:withCreditCard:withSalesBook: stamp: 'SN 11/4/2019 20:04:44'!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook

	self error: 'No se puede hacer checkout de un carrito vacio'.

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook !

!methodRemoval: Cashier #initializeFor:withCreditCard:withSalesBook: stamp: 'SN 11/4/2019 20:04:51'!
initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	salesBook := aSalesBook .!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 20:05:55' prior: 50782793!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := (Cart acceptingItemsOf: catalog) add: 'validBook'; yourself.
	someOldDate := GregorianMonthOfYear year: 1962 month: November.
	someDate := FixedGregorianDate year: 2020 month: March dayNumber: 20! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:05:56'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:05:56'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:05:56'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 20:06:18'!
withNumber: aString withOwnerName: aString2 withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString withOwnerName: aString2 withExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 20:07:11' prior: 50782928!
withNumber: aNumber withOwnerName: anOwnerName withExpiration: anExpiration 
	
	^self new initializeWithNumber: aNumber withOwnerName: anOwnerName withExpiration: anExpiration ! !

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:07:13'!
ERROR!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SN 11/4/2019 20:07:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SN 11/4/2019 20:07:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SN 11/4/2019 20:07:43'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'SN 11/4/2019 20:07:43'!
initializeWithNumber: aNumber withOwnerName: anOwnerName withExpiration: anExpiration 
	self shouldBeImplemented.
	number := aNumber.
	ownerName := anOwnerName.
	expiration := anExpiration.! !
!CreditCard methodsFor: 'initialization' stamp: 'SN 11/4/2019 20:07:53' prior: 50782973!
initializeWithNumber: aNumber withOwnerName: anOwnerName withExpiration: anExpiration 
	
	number := aNumber.
	ownerName := anOwnerName.
	expiration := anExpiration.! !

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:08:05'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 20:09:47' prior: 50782874!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio'].

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate .! !
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 20:10:12' prior: 50782994!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio'].
	
	self error: 'Tarjeta expirada'.

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate .! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:10:12'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:10:12'!
PASSED!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/4/2019 20:13:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart someOldDate someDate someFarDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:13:06'!
test03CashierWithoneItemCartAndValidCreditCardRaisesNoError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier_build := [Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook withDate: someDate ].
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:13:24' prior: 50783034!
test03CashierWithoneItemCartAndValidCreditCardRaisesNoError

	| expiredCard |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook withDate: someDate.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 20:14:31' prior: 50782903!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := (Cart acceptingItemsOf: catalog) add: 'validBook'; yourself.
	someOldDate := GregorianMonthOfYear year: 1962 month: November.
	someDate := FixedGregorianDate year: 2020 month: March dayNumber: 20.
	someFarDate := FixedGregorianDate year: 2050 month: May dayNumber: 3.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:14:32'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:14:32'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:14:32'!
ERROR!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:14:32'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/4/2019 20:15:34' prior: 50783006!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio'].
	
	(aCreditCard expiredAfter: aDate) ifTrue: [self error: 'Tarjeta expirada'].

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate .! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:15:37'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:15:37'!
ERROR!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:15:37'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:15:47'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'SN 11/4/2019 20:16:04'!
expiredAfter: aFixedGregorianDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'SN 11/4/2019 20:16:41' prior: 50783123!
expiredAfter: aFixedGregorianDate 
	
	expiration ! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'SN 11/4/2019 20:16:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'number ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SN 11/4/2019 20:16:45' prior: 50782982!
initializeWithNumber: aNumber withOwnerName: anOwnerName withExpiration: anExpiration 
	
	number := aNumber.
	ownerName := anOwnerName.
	expirationDate := anExpiration.! !
!CreditCard methodsFor: 'testing' stamp: 'SN 11/4/2019 20:17:11' prior: 50783128!
expiredAfter: aFixedGregorianDate 
	
	^ expirationDate > aFixedGregorianDate ! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:17:23'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:17:23'!
ERROR!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:17:23'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:17:26'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:17:48'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'SN 11/4/2019 20:18:39' prior: 50783149!
expiredAfter: aFixedGregorianDate 
	
	^ expirationDate > aFixedGregorianDate ! !
!CreditCard methodsFor: 'testing' stamp: 'SN 11/4/2019 20:18:58' prior: 50783173!
expiredAfter: aFixedGregorianDate 
	
	^ aFixedGregorianDate < expirationDate! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:19:04'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:19:04'!
ERROR!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:19:04'!
ERROR!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:19:07'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'SN 11/4/2019 20:19:47' prior: 50783179!
expiredAfter: aFixedGregorianDate 
	
	^ expirationDate < aFixedGregorianDate! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:19:49'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:19:49'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:19:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:23:37' prior: 50783049!
test03CashierWithoneItemCartAndValidCreditCardRaisesNoError

	| validCard |
	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	Cashier for: oneItemCart withCreditCard: validCard withSalesBook: emptySalesBook withDate: someDate.
	
	self assert: emptySalesBook isEmpty.! !

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:23:38'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:23:38'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:23:38'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:23:38'!
PASSED!

----SNAPSHOT----(4 November 2019 20:23:51) CuisUniversity-3938.image priorSource: 14405335!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:39:11'!
test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout

	| validCard cashier |
	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: emptySalesBook withDate: someDate.
	cashier checkout.
	
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:40:38' prior: 50783246!
test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout

	| validCard cashier salesBook |
	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate.
	cashier checkout.
	
	
	self assert: false.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:41:10' prior: 50783261!
test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate.
	cashier checkout.
	
	
	self assert: false.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/4/2019 20:41:45' prior: 50783276!
test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:41:47'!
ERROR!

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 11/4/2019 20:45:00'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesBook date amountToCharge'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'cobranding' stamp: 'SN 11/4/2019 20:45:06' prior: 50781641!
checkout
	
	amountToCharge := cart totalPrice .
	self debit.
	salesBook add: amountToCharge .! !

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:45:17'!
ERROR!
!Cashier methodsFor: 'private cobranding' stamp: 'SN 11/4/2019 20:45:37'!
debit
	self shouldBeImplemented.! !
!Cashier methodsFor: 'private cobranding' stamp: 'SN 11/4/2019 20:45:44' prior: 50783331!
debit
	
	! !

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:45:52'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:45:52'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:45:52'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:45:52'!
PASSED!

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:45:52'!
PASSED!

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:45:56'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:45:56'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:45:56'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:45:56'!
PASSED!

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:45:56'!
PASSED!
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 20:47:22' prior: 50783063!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := (Cart acceptingItemsOf: catalog) add: 'validBook'; yourself.
	someOldDate := GregorianMonthOfYear yearNumber: 1962 month: November.
	someDate := FixedGregorianDate yearNumber: 2020 month: March dayNumber: 20.
	someFarDate := FixedGregorianDate yearNumber: 2050 month: May dayNumber: 3.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/4/2019 20:47:25' prior: 50783377!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := (Cart acceptingItemsOf: catalog) add: 'validBook'; yourself.
	someOldDate := GregorianMonthOfYear yearNumber: 1962 month: November.
	someDate := FixedGregorianDate yearNumber: 2020 month: March dayNumber: 20.
	someFarDate := FixedGregorianDate yearNumber: 2050 month: May dayNumber: 3.! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/4/2019 20:47:26'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/4/2019 20:47:26'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/4/2019 20:47:26'!
PASSED!

!testRun: #CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/4/2019 20:47:26'!
PASSED!

----QUIT----(4 November 2019 21:47:38) CuisUniversity-3938.image priorSource: 14450954!

----STARTUP---- (7 November 2019 15:55:01) as /home/snahmod/Documentos/UBA/2019/Segundo Cuatrimestre/Ingsoft I/cuis-nuevo/CuisUniversity-3938.image!

!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:16:20' prior: 50783292!
test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !

[ 'hola' ] simulateValueWithArguments: #(#lelo) caller: thisContext .!

([ 'hola' ] simulateValueWithArguments: #(#lelo) caller: thisContext) lelo.!

([ 'hola' ] simulateValueWithArguments: #(#lelo) caller: thisContext) first.!

([ 'hola' ] simulateValueWithArguments: #(#lelo) caller: thisContext) first lelo!

([ ^'hola' ] simulateValueWithArguments: #(#lelo) caller: thisContext) !

([ :a | ^a ] simulateValueWithArguments: #('olo') caller: thisContext) !

([ :a | a ] simulateValueWithArguments: #('olo') caller: thisContext) !

([ :a | a ] simulateValueWithArguments: #("olo") caller: thisContext) !

([ :a | a ] simulateValueWithArguments: #("olo") caller: thisContext) first!

([ :a | a ] simulateValueWithArguments: #("olo") caller: thisContext) first!

[ 'oaao' ] value!

[ 'oaao' ] lelo!

[ 'oaao' ] argumentCount !

[ 'oaao' ] home !

[ 'oaao' ] capturedValues !

[ 'oaao' ] receiver !

[ 'oaao' ] at: 0!

[ 'oaao' ] addInstanceVarNamed: 'lala' withValue: 0!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SN 11/7/2019 16:51:34'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'emptyCart aCard emptySalesBook catalog oneItemCart someOldDate someDate someFarDate mockedDebitFrom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'mocking' stamp: 'SN 11/7/2019 16:51:32'!
debitFrom: aCreditCard

	^ mockedDebitFrom value.! !
!CashierTest methodsFor: 'setUp/tearDown' stamp: 'SN 11/7/2019 16:51:51' prior: 50783395!
setUp

	emptySalesBook := OrderedCollection new.
	catalog := Dictionary new add: 'validBook'->0; yourself.
	emptyCart := Cart acceptingItemsOf: catalog.
	oneItemCart := (Cart acceptingItemsOf: catalog) add: 'validBook'; yourself.
	someOldDate := GregorianMonthOfYear yearNumber: 1962 month: November.
	someDate := FixedGregorianDate yearNumber: 2020 month: March dayNumber: 20.
	someFarDate := FixedGregorianDate yearNumber: 2050 month: May dayNumber: 3.
	mockedDebitFrom := [].! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SN 11/7/2019 16:54:26'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard salesBook date amountToCharge paymentProcesor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SN 11/7/2019 16:54:24'!
initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate withPaymentProcesor: aPaymentProcesor
	
	cart := aCart.
	creditCard := aCreditCard.
	salesBook := aSalesBook .
	date := aDate .
	paymentProcesor := aPaymentProcesor .! !

!methodRemoval: Cashier #initializeFor:withCreditCard:withSalesBook:withDate: stamp: 'SN 11/7/2019 16:54:30'!
initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate
	
	cart := aCart.
	creditCard := aCreditCard.
	salesBook := aSalesBook .
	date := aDate .!
!Cashier class methodsFor: 'instance creation' stamp: 'SN 11/7/2019 16:54:56'!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate withPaymentProcesor: aPaymentProcesor

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio'].
	
	(aCreditCard expiredAfter: aDate) ifTrue: [self error: 'Tarjeta expirada'].

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate withPaymentProcesor: aPaymentProcesor.! !

!methodRemoval: Cashier class #for:withCreditCard:withSalesBook:withDate: stamp: 'SN 11/7/2019 16:54:59'!
for: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate

	aCart isEmpty ifTrue: [self error: 'No se puede hacer checkout de un carrito vacio'].
	
	(aCreditCard expiredAfter: aDate) ifTrue: [self error: 'Tarjeta expirada'].

	^self new initializeFor: aCart withCreditCard: aCreditCard withSalesBook: aSalesBook withDate: aDate .!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:55:25' prior: 50782844!
test01CashierWithEmptyCartRaisesError

	|cashier_build|
	
	cashier_build := [Cashier for: emptyCart withCreditCard: aCard withSalesBook: emptySalesBook withDate: someDate withPaymentProcesor: self].
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'No se puede hacer checkout de un carrito vacio'.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:55:31' prior: 50782826!
test02CashierWithoneItemCartAndExpiredCartRaisesError

	| expiredCard cashier_build |
	
	expiredCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someOldDate.
	
	cashier_build := [Cashier for: oneItemCart withCreditCard: expiredCard withSalesBook: emptySalesBook withDate: someDate withPaymentProcesor: self].
	
	
	self should: cashier_build 
		raise: Error - MessageNotUnderstood
		withMessageText: 'Tarjeta expirada'.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:55:36' prior: 50783215!
test03CashierWithoneItemCartAndValidCreditCardRaisesNoError

	| validCard |
	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	Cashier for: oneItemCart withCreditCard: validCard withSalesBook: emptySalesBook withDate: someDate withPaymentProcesor: self.
	
	self assert: emptySalesBook isEmpty.! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:56:06'!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !

!methodRemoval: CashierTest #test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout stamp: 'SN 11/7/2019 16:56:06'!
test04CashierWithoneItemCartAndValidCreditRegitersSellAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:56:12' prior: 50783621!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:56:36' prior: 50783655!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := [self error: 'SOME ERROR'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:57:22' prior: 50783673!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := [self error: 'SOME ERROR'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood 
		des.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:57:42' prior: 50783692!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := [self error: 'SOME ERROR'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.
	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'SOME ERROR'.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:57:45' prior: 50783713!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := [self error: 'SOME ERROR'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.

	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'SOME ERROR'.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:57:54' prior: 50783735!
test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := [self error: 'SOME ERROR'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.

	self should: [cashier checkout]
		raise: Error - MessageNotUnderstood 
		withMessageText: 'SOME ERROR'.
	
	self assert: salesBook isEmpty .! !

!testRun: #CashierTest #test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout stamp: 'SN 11/7/2019 16:57:57'!
FAILURE!
!Cashier methodsFor: 'private cobranding' stamp: 'SN 11/7/2019 16:58:32' prior: 50783335!
debit
	
	paymentProcesor debitFrom: creditCard .! !

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/7/2019 16:58:36'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/7/2019 16:58:36'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/7/2019 16:58:36'!
PASSED!

!testRun: #CashierTest #test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout stamp: 'SN 11/7/2019 16:58:36'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:59:03'!
test05CashierWithOneItemCartAndValidCreditRegistersSell

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := [self error: 'SOME ERROR'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !
!CashierTest methodsFor: 'tests' stamp: 'SN 11/7/2019 16:59:20' prior: 50783801!
test05CashierWithOneItemCartAndValidCreditRegistersSell

	| validCard cashier salesBook |
	
	salesBook := emptySalesBook .	
	validCard := CreditCard withNumber: '0000000000000000' withOwnerName: 'Eden Torres' withExpiration: someFarDate.
	
	mockedDebitFrom := ['OK'].
	
	cashier := Cashier for: oneItemCart withCreditCard: validCard withSalesBook: salesBook withDate: someDate withPaymentProcesor: self.
	cashier checkout.
	
	self assert: salesBook includes: oneItemCart totalPrice .! !

!testRun: #CashierTest #test05CashierWithOneItemCartAndValidCreditRegistersSell stamp: 'SN 11/7/2019 16:59:21'!
PASSED!

!testRun: #CashierTest #test01CashierWithEmptyCartRaisesError stamp: 'SN 11/7/2019 16:59:21'!
PASSED!

!testRun: #CashierTest #test02CashierWithoneItemCartAndExpiredCartRaisesError stamp: 'SN 11/7/2019 16:59:21'!
PASSED!

!testRun: #CashierTest #test03CashierWithoneItemCartAndValidCreditCardRaisesNoError stamp: 'SN 11/7/2019 16:59:21'!
PASSED!

!testRun: #CashierTest #test04CashierWithOneItemCartAndValidCreditRaisesErrorAtCheckout stamp: 'SN 11/7/2019 16:59:21'!
PASSED!

!testRun: #CashierTest #test05CashierWithOneItemCartAndValidCreditRegistersSell stamp: 'SN 11/7/2019 16:59:21'!
PASSED!